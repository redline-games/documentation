{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Base Project Documentation We have compiled a brief documentation of the base project and other RLG packages that will help develop games with much more ease, fluidity and speed. Please go through each page to make sure you are aware of all features and how to use them. How to use Clone the base project from https://gitlab.com/redlinegames/baseproject.git Duplicate the project files in your working repository and use that as a base for any new project NOTE: In case you do not have access to the base project repository, please contact the Sr. Developer or the Project Manager Overview Features Mentions notable features that have been integrated in th base project Scripts Gives a basic understanding of all important scripts and how to use them Beautification Outlines tools included in the project that will help you organise the project better Custom Tools Custom tools developed to assist rapid development Dev Console A custom package to help with game testing Creative package A custom package that will help you record top-notch creatives Packages Download links for all templates and custom packages Base project Creative package Runner game template","title":"Home"},{"location":"#welcome-to-base-project-documentation","text":"We have compiled a brief documentation of the base project and other RLG packages that will help develop games with much more ease, fluidity and speed. Please go through each page to make sure you are aware of all features and how to use them.","title":"Welcome to Base Project Documentation"},{"location":"#how-to-use","text":"Clone the base project from https://gitlab.com/redlinegames/baseproject.git Duplicate the project files in your working repository and use that as a base for any new project NOTE: In case you do not have access to the base project repository, please contact the Sr. Developer or the Project Manager","title":"How to use"},{"location":"#overview","text":"","title":"Overview"},{"location":"#features","text":"Mentions notable features that have been integrated in th base project","title":"Features"},{"location":"#scripts","text":"Gives a basic understanding of all important scripts and how to use them","title":"Scripts"},{"location":"#beautification","text":"Outlines tools included in the project that will help you organise the project better","title":"Beautification"},{"location":"#custom-tools","text":"Custom tools developed to assist rapid development","title":"Custom Tools"},{"location":"#dev-console","text":"A custom package to help with game testing","title":"Dev Console"},{"location":"#creative-package","text":"A custom package that will help you record top-notch creatives","title":"Creative package"},{"location":"#packages","text":"Download links for all templates and custom packages","title":"Packages"},{"location":"#base-project","text":"","title":"Base project"},{"location":"#creative-package_1","text":"","title":"Creative package"},{"location":"#runner-game-template","text":"","title":"Runner game template"},{"location":"about/","text":"About Something about the base package Details","title":"About"},{"location":"about/#about","text":"Something about the base package","title":"About"},{"location":"about/#details","text":"","title":"Details"},{"location":"beautification/","text":"Beautification We have a few custom features that enable you to organize and beautify your project setup. Hierarchy Separators Use this to sort and color-code the hierarchy. Simply apply the relevant tags to apply the style. Inspector Horizontal Line Use this to sort related items within a script.","title":"Beautification"},{"location":"beautification/#beautification","text":"We have a few custom features that enable you to organize and beautify your project setup.","title":"Beautification"},{"location":"beautification/#hierarchy-separators","text":"Use this to sort and color-code the hierarchy. Simply apply the relevant tags to apply the style.","title":"Hierarchy Separators"},{"location":"beautification/#inspector-horizontal-line","text":"Use this to sort related items within a script.","title":"Inspector Horizontal Line"},{"location":"creativepackage/","text":"Creative Package We have a bunch of features packed into a single package that will help you speed up the development for CPI videos. You can download the latest version of the creative package here Once imported, you can access all features via the [CPIManager] prefab. To create the prefab, navigate to the top bar CustomTools > Create CPI Manager Features CPI Guidelines Read through the CPI Guidelines for better understanding of how to record videos and what to focus on. CPI End Screen Handler Allows selection of the type of end screen required among Emoji, Banner and Stamp. You can also set the keybinds to trigger Win and Fail sequences. CTA Handler Use the CTA handler properties to create a customised CTA screen with the required game name, icon and other properties. CPI Hand Controller Select which type of hand sprite you want to use. You can edit hand settings in the Scriptable Object located at \"Assets/CreativesSetup/HandPresets/CPIHandData\" . Left click => Hand tap animation Right click => Incorrect click indication Scroll click => Toggle hand visibility CPI Gratification Handler Set a keybind to spawn gratification text at target position. CPI Highlight Handler Use the CPI highlight handler to highlight specific areas of the game screen to grab attention. CPI Alert Handler The CPI alert handler allows you to add a full-screen vignette to alert the viewer or indicate urgency. CPI Camera Handler Set up the properties required for a camera shake effect. CPI Level End Text Handler This module allows you to show animated text commonly used to show reason for failure, like \"Out of Space!\" . CPI Incorrect Click Handler This module allows enabling 3 X indicators at the top of the screen that can be used to show wrong decisions made by the player. Screen Sequence You can define a list of screens that will automatically be called in sequence when Win or Fail is triggered via the CPI End Screen Handler","title":"Creative Package"},{"location":"creativepackage/#creative-package","text":"We have a bunch of features packed into a single package that will help you speed up the development for CPI videos. You can download the latest version of the creative package here Once imported, you can access all features via the [CPIManager] prefab. To create the prefab, navigate to the top bar CustomTools > Create CPI Manager","title":"Creative Package"},{"location":"creativepackage/#features","text":"","title":"Features"},{"location":"creativepackage/#cpi-guidelines","text":"Read through the CPI Guidelines for better understanding of how to record videos and what to focus on.","title":"CPI Guidelines"},{"location":"creativepackage/#cpi-end-screen-handler","text":"Allows selection of the type of end screen required among Emoji, Banner and Stamp. You can also set the keybinds to trigger Win and Fail sequences.","title":"CPI End Screen Handler"},{"location":"creativepackage/#cta-handler","text":"Use the CTA handler properties to create a customised CTA screen with the required game name, icon and other properties.","title":"CTA Handler"},{"location":"creativepackage/#cpi-hand-controller","text":"Select which type of hand sprite you want to use. You can edit hand settings in the Scriptable Object located at \"Assets/CreativesSetup/HandPresets/CPIHandData\" . Left click => Hand tap animation Right click => Incorrect click indication Scroll click => Toggle hand visibility","title":"CPI Hand Controller"},{"location":"creativepackage/#cpi-gratification-handler","text":"Set a keybind to spawn gratification text at target position.","title":"CPI Gratification Handler"},{"location":"creativepackage/#cpi-highlight-handler","text":"Use the CPI highlight handler to highlight specific areas of the game screen to grab attention.","title":"CPI Highlight Handler"},{"location":"creativepackage/#cpi-alert-handler","text":"The CPI alert handler allows you to add a full-screen vignette to alert the viewer or indicate urgency.","title":"CPI Alert Handler"},{"location":"creativepackage/#cpi-camera-handler","text":"Set up the properties required for a camera shake effect.","title":"CPI Camera Handler"},{"location":"creativepackage/#cpi-level-end-text-handler","text":"This module allows you to show animated text commonly used to show reason for failure, like \"Out of Space!\" .","title":"CPI Level End Text Handler"},{"location":"creativepackage/#cpi-incorrect-click-handler","text":"This module allows enabling 3 X indicators at the top of the screen that can be used to show wrong decisions made by the player.","title":"CPI Incorrect Click Handler"},{"location":"creativepackage/#screen-sequence","text":"You can define a list of screens that will automatically be called in sequence when Win or Fail is triggered via the CPI End Screen Handler","title":"Screen Sequence"},{"location":"customtools/","text":"Custom Tools We have developed a few custom scripts that help with tedious tasks These scripts are already integrated into the base project You can access them through the top bar CustomTools Features Scene Selector This tool allows you to navigate to any scene that is included in the build Bulk Rename GameObjects Use this tool to rename multiple objects at once. The naming scheme supports prefixes, suffixes and serialization Bulk Replace GameObjects Use this tool to replace multiple objects with another prefab. You can copy transform properties and optionally choose to delete the old objects Diawi Slack Bot This tool can be used to upload IPA builds to Diawi for testing Multi-resolution Screenshot Use this to capture high quality screenshots in multiple aspect ratios Toggle Dev Console Helps enable/disable Dev Console in the game","title":"Custom Tools"},{"location":"customtools/#custom-tools","text":"We have developed a few custom scripts that help with tedious tasks These scripts are already integrated into the base project You can access them through the top bar CustomTools","title":"Custom Tools"},{"location":"customtools/#features","text":"","title":"Features"},{"location":"customtools/#scene-selector","text":"This tool allows you to navigate to any scene that is included in the build","title":"Scene Selector"},{"location":"customtools/#bulk-rename-gameobjects","text":"Use this tool to rename multiple objects at once. The naming scheme supports prefixes, suffixes and serialization","title":"Bulk Rename GameObjects"},{"location":"customtools/#bulk-replace-gameobjects","text":"Use this tool to replace multiple objects with another prefab. You can copy transform properties and optionally choose to delete the old objects","title":"Bulk Replace GameObjects"},{"location":"customtools/#diawi-slack-bot","text":"This tool can be used to upload IPA builds to Diawi for testing","title":"Diawi Slack Bot"},{"location":"customtools/#multi-resolution-screenshot","text":"Use this to capture high quality screenshots in multiple aspect ratios","title":"Multi-resolution Screenshot"},{"location":"customtools/#toggle-dev-console","text":"Helps enable/disable Dev Console in the game","title":"Toggle Dev Console"},{"location":"devconsole/","text":"Dev Console Dev console is a custom package has has features which help the team test the game more efficiently It is already integrated into the base project You can enable/disable the dev console via the top bar CustomTools > Toggle Dev Console Once enabled, the scene will show a + button. Clicking on it will open up the dev console Features Level Navigation Buttons Use these buttons to navigate to the previous and next levels Level End Buttons Use these buttons to trigger Level Fail or Level Complete states Level Selector This feature enables you to jump to a specific level Active level - Shows if current level is set via test level selector. Test level - Level number to load. For example, if value is 5, level 5 will be loaded. Test level after loop - Level number to load after the first loop of max levels. For example, if value is 5 and max levels in the game are 20, then whenever level 5 is loaded randomly after level 20, that level is loaded. Clear button - Stops loading test level. The game will resume original progression. Load button - Loads the level specified in either \"Test level\" or \"Test level after loop\". Currency Modifier Any currency in the scene will automatically be added to this section. You can use it to modify the amount at runtime. Save Data Modifier Any saved data - via PlayerPrefs or via EasySave can be cleared using this module. This makes it easy to reset the game for testing. Level Timer This module can be used to check the total time taken to clear/fail the level Enabled - Defines if the module is enabled or not. Visualize - If true, the timer module will be visible in the game. Auto Mode - If true, the timer starts and stops itself automatically based on in-game events like OnGameStarted, OnGamePaused, OnGameResumed, OnLevelComplete, OnLevelFailed.","title":"Dev Console"},{"location":"devconsole/#dev-console","text":"Dev console is a custom package has has features which help the team test the game more efficiently It is already integrated into the base project You can enable/disable the dev console via the top bar CustomTools > Toggle Dev Console Once enabled, the scene will show a + button. Clicking on it will open up the dev console","title":"Dev Console"},{"location":"devconsole/#features","text":"","title":"Features"},{"location":"devconsole/#level-navigation-buttons","text":"Use these buttons to navigate to the previous and next levels","title":"Level Navigation Buttons"},{"location":"devconsole/#level-end-buttons","text":"Use these buttons to trigger Level Fail or Level Complete states","title":"Level End Buttons"},{"location":"devconsole/#level-selector","text":"This feature enables you to jump to a specific level Active level - Shows if current level is set via test level selector. Test level - Level number to load. For example, if value is 5, level 5 will be loaded. Test level after loop - Level number to load after the first loop of max levels. For example, if value is 5 and max levels in the game are 20, then whenever level 5 is loaded randomly after level 20, that level is loaded. Clear button - Stops loading test level. The game will resume original progression. Load button - Loads the level specified in either \"Test level\" or \"Test level after loop\".","title":"Level Selector"},{"location":"devconsole/#currency-modifier","text":"Any currency in the scene will automatically be added to this section. You can use it to modify the amount at runtime.","title":"Currency Modifier"},{"location":"devconsole/#save-data-modifier","text":"Any saved data - via PlayerPrefs or via EasySave can be cleared using this module. This makes it easy to reset the game for testing.","title":"Save Data Modifier"},{"location":"devconsole/#level-timer","text":"This module can be used to check the total time taken to clear/fail the level Enabled - Defines if the module is enabled or not. Visualize - If true, the timer module will be visible in the game. Auto Mode - If true, the timer starts and stops itself automatically based on in-game events like OnGameStarted, OnGamePaused, OnGameResumed, OnLevelComplete, OnLevelFailed.","title":"Level Timer"},{"location":"diawisetup/","text":"Diawi Setup Diawi is a platform that allows us to easily share builds for testing. This document provides a brief setup guide to get started. Install homebrew -- Skip this step if homebrew is already installed -- Homebrew is a package management software that will easily let you install softwares on your mac. To install homebrew, open Terminal and run the following command /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Next, run the following commands one by one to add the path for homebrew (echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> /Users/[YOUR_USER]/.zprofile eval \"$(/opt/homebrew/bin/brew shellenv)\" Install python3 You can check if you already have python3 installed using the following command python3 --version If python3 is not installed, you can install it using homebrew brew install python Once installation is complete you can verify it again using python3 --version Edit Path for zsh In your Finder window, navigate to Users/[YOUR_USER] Enable hidden files using the keys cmd + shift + . Once hidden files are visible, look for a file by the name \".zshrc\" If such a file does not exist, you can download one from here and paste it in the folder If the file exists, open it in TextEdit and add the following lines to set PATH for python3 and also set aliases for python and pip export PATH=\"/opt/homebrew/bin:$PATH\" alias python=\"python3\" alias pip=\"pip3\" Finally to update and save the .zshrc file, run source ~/.zshrc Now you can run these commands one by one python \u2014-version pip \u2014-version They should return python3 and pip3 versions respectively as we have added aliases for them Install pip -- Skip this step if pip is already installed -- Get the latest python3 installation package from here","title":"Diawi Setup"},{"location":"diawisetup/#diawi-setup","text":"Diawi is a platform that allows us to easily share builds for testing. This document provides a brief setup guide to get started.","title":"Diawi Setup"},{"location":"diawisetup/#install-homebrew","text":"-- Skip this step if homebrew is already installed -- Homebrew is a package management software that will easily let you install softwares on your mac. To install homebrew, open Terminal and run the following command /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Next, run the following commands one by one to add the path for homebrew (echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> /Users/[YOUR_USER]/.zprofile eval \"$(/opt/homebrew/bin/brew shellenv)\"","title":"Install homebrew"},{"location":"diawisetup/#install-python3","text":"You can check if you already have python3 installed using the following command python3 --version If python3 is not installed, you can install it using homebrew brew install python Once installation is complete you can verify it again using python3 --version","title":"Install python3"},{"location":"diawisetup/#edit-path-for-zsh","text":"In your Finder window, navigate to Users/[YOUR_USER] Enable hidden files using the keys cmd + shift + . Once hidden files are visible, look for a file by the name \".zshrc\" If such a file does not exist, you can download one from here and paste it in the folder If the file exists, open it in TextEdit and add the following lines to set PATH for python3 and also set aliases for python and pip export PATH=\"/opt/homebrew/bin:$PATH\" alias python=\"python3\" alias pip=\"pip3\" Finally to update and save the .zshrc file, run source ~/.zshrc Now you can run these commands one by one python \u2014-version pip \u2014-version They should return python3 and pip3 versions respectively as we have added aliases for them","title":"Edit Path for zsh"},{"location":"diawisetup/#install-pip","text":"-- Skip this step if pip is already installed -- Get the latest python3 installation package from here","title":"Install pip"},{"location":"features/","text":"Features Currency Manager Money matters \ud83d\udcb8. Use one manager per currency, assign relevant data in the corresponding scriptable object and you're set. [CurrencyManager] prefab can be found in Assets/Prefabs/Currency Make sure the respective 2D and 3D currency prefabs are added in PoolBoss Pooling Pool is cool \ud83d\ude0e. When you need a bunch of the same prefab multiple times, use pooling instead of spawning them at runtime for better runtime performance. Don't forget to add your prefabs to PoolBoss Level End Screens Some wins \ud83c\udf89, some fails \u2620\ufe0f. A set of default screens have already been integrated for easy game flow. To customize, extend the LevelEndScreenBase script and create custom win and lose scripts Progress Bars Keep progressing \ud83d\udcc8. A variety of progress bars have been pre-made for easy integration You can find the different types of progress bars in Assets/Prefabs/ProgressBar Gratification Gratify everything \ud83c\udf89. Easy method invocation to show in-game gratification texts You can call the method via GratificationHandler > Instance Haptics Tap, vibrate, experience \ud83d\udcf3. Choose from pre-built presets like Success \u2705, Failure \u26a0\ufe0f, Light \ud83e\udeb6, and Heavy \ud83e\udea8 among others. Haptics can be accessed via the HapticsManager Audio Let the music play. Easily Play and manage music \ud83d\udd0a and SFX \ud83d\udd14 with customizable volume and pitch. Use AudioManager to handle any in-game sounds Scene Loader Transition between scenes \ud83c\udfac seamlessly. Use the Scene Loader and Transition Manager in tandem to load scenes with visible loading progress or just a generic loading screen. Transition manager supports different types of transitions that can be extended Settings A pre-made settings \u2699\ufe0f panel has been created for your convenience. Easily integrate toggles for music and haptics, as well as attributions for non-cc0 artwork. SettingsHandler deals with everything related to settings To add attribution, add info in the AtrributionDataSO and it'll reflect automatically Button Attribute Test with ease \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c. Use attribute [Button] to expose the method as shown in above image UI Particles Particles \u2728 always make things better. Now integrate particle systems in overlay canvas. Add the UIParticleSystem component to render particles in UI UI Gradient Add gradients \ud83c\udfa8 to UI Images for a more polished look. You can make bland screens pop much more using simple vertical and horizontal gradients. Add the Gradient or Gradient2 component on any image UI Gradient example Render Texture Creator Render the world \ud83c\udf0f in UI. Easily set up dynamically created render textures that don't bloat your build size. RenderTextureCamera prefab can be found in Assets/Prefabs/RenderTextureCamera Place it in scene, use the camera to set up your visuals, assign raw images, and hit play Some helpful buttons are also provided on the script to help you Custom Shaders Let the creative juices flow \ud83e\udde0. Some basic custom shaders to create effects like Checkerboard, Heat Haze, Stipple, Better Transparency All custom shader can be found in Assets/Shaders 3D Mask Mask \ud83c\udfad 3D objects in world space. You can make objects be visible either inside or outside the mask object. Mask shaders can be found in Assets/Shaders/3DMask An example showcasing this can be found in Assets/Prefabs/3DMask/3DMaskExample 9-sliced Circles Life is a circle \u26aa. You can create a lot of UI just using a 9-sliced white circle sprite. The project already has Circle_512 and Circle_64 sprites that have been sliced To use them, assign the sprite to an image component and play around with the \"Pixels Per Unit Multiplier\" value to get the desired rounding. 9-slicing example Build Config Popup Build Setings \u2699\ufe0f. Make sure your build uses correct IDs. Build config popup lets you check and confirm bundle ID and project name directly You can also toggle Dev Console from here This window appears automatically when building Build Report Reporting Live \ud83d\udcdd. Get detailed information of what is bloating your build. Build report will automatically be created when you make a build You can open report window from Window > Show Build Report Extension Methods Collections Array and List extension methods to shuffle, get random item, get random index, delete null elements, debug all elements. Scroll Methods to auto-scroll to a specific point or item in the scrollview. Animator Controller Start animation from random frame, change speed of animations. Camera Transition camera position and rotation, shake camera, change FOV. TMP_Text Animate numbers to easily show changing values. Can also animate text appear and disapper effect. Utilities Floating Text Use it to show damage text, money earned/spent, etc. Floating text can be spawned via [FloatingTextManager] Tags and Layers Easily access all Tags and Layers as an Enum. Custom Buttons Create buttons easily vis pre-defined templates. To create a custon button, go to Create > UI > CustomButton","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#currency-manager","text":"Money matters \ud83d\udcb8. Use one manager per currency, assign relevant data in the corresponding scriptable object and you're set. [CurrencyManager] prefab can be found in Assets/Prefabs/Currency Make sure the respective 2D and 3D currency prefabs are added in PoolBoss","title":"Currency Manager"},{"location":"features/#pooling","text":"Pool is cool \ud83d\ude0e. When you need a bunch of the same prefab multiple times, use pooling instead of spawning them at runtime for better runtime performance. Don't forget to add your prefabs to PoolBoss","title":"Pooling"},{"location":"features/#level-end-screens","text":"Some wins \ud83c\udf89, some fails \u2620\ufe0f. A set of default screens have already been integrated for easy game flow. To customize, extend the LevelEndScreenBase script and create custom win and lose scripts","title":"Level End Screens"},{"location":"features/#progress-bars","text":"Keep progressing \ud83d\udcc8. A variety of progress bars have been pre-made for easy integration You can find the different types of progress bars in Assets/Prefabs/ProgressBar","title":"Progress Bars"},{"location":"features/#gratification","text":"Gratify everything \ud83c\udf89. Easy method invocation to show in-game gratification texts You can call the method via GratificationHandler > Instance","title":"Gratification"},{"location":"features/#haptics","text":"Tap, vibrate, experience \ud83d\udcf3. Choose from pre-built presets like Success \u2705, Failure \u26a0\ufe0f, Light \ud83e\udeb6, and Heavy \ud83e\udea8 among others. Haptics can be accessed via the HapticsManager","title":"Haptics"},{"location":"features/#audio","text":"Let the music play. Easily Play and manage music \ud83d\udd0a and SFX \ud83d\udd14 with customizable volume and pitch. Use AudioManager to handle any in-game sounds","title":"Audio"},{"location":"features/#scene-loader","text":"Transition between scenes \ud83c\udfac seamlessly. Use the Scene Loader and Transition Manager in tandem to load scenes with visible loading progress or just a generic loading screen. Transition manager supports different types of transitions that can be extended","title":"Scene Loader"},{"location":"features/#settings","text":"A pre-made settings \u2699\ufe0f panel has been created for your convenience. Easily integrate toggles for music and haptics, as well as attributions for non-cc0 artwork. SettingsHandler deals with everything related to settings To add attribution, add info in the AtrributionDataSO and it'll reflect automatically","title":"Settings"},{"location":"features/#button-attribute","text":"Test with ease \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c. Use attribute [Button] to expose the method as shown in above image","title":"Button Attribute"},{"location":"features/#ui-particles","text":"Particles \u2728 always make things better. Now integrate particle systems in overlay canvas. Add the UIParticleSystem component to render particles in UI","title":"UI Particles"},{"location":"features/#ui-gradient","text":"Add gradients \ud83c\udfa8 to UI Images for a more polished look. You can make bland screens pop much more using simple vertical and horizontal gradients. Add the Gradient or Gradient2 component on any image UI Gradient example","title":"UI Gradient"},{"location":"features/#render-texture-creator","text":"Render the world \ud83c\udf0f in UI. Easily set up dynamically created render textures that don't bloat your build size. RenderTextureCamera prefab can be found in Assets/Prefabs/RenderTextureCamera Place it in scene, use the camera to set up your visuals, assign raw images, and hit play Some helpful buttons are also provided on the script to help you","title":"Render Texture Creator"},{"location":"features/#custom-shaders","text":"Let the creative juices flow \ud83e\udde0. Some basic custom shaders to create effects like Checkerboard, Heat Haze, Stipple, Better Transparency All custom shader can be found in Assets/Shaders","title":"Custom Shaders"},{"location":"features/#3d-mask","text":"Mask \ud83c\udfad 3D objects in world space. You can make objects be visible either inside or outside the mask object. Mask shaders can be found in Assets/Shaders/3DMask An example showcasing this can be found in Assets/Prefabs/3DMask/3DMaskExample","title":"3D Mask"},{"location":"features/#9-sliced-circles","text":"Life is a circle \u26aa. You can create a lot of UI just using a 9-sliced white circle sprite. The project already has Circle_512 and Circle_64 sprites that have been sliced To use them, assign the sprite to an image component and play around with the \"Pixels Per Unit Multiplier\" value to get the desired rounding. 9-slicing example","title":"9-sliced Circles"},{"location":"features/#build-config-popup","text":"Build Setings \u2699\ufe0f. Make sure your build uses correct IDs. Build config popup lets you check and confirm bundle ID and project name directly You can also toggle Dev Console from here This window appears automatically when building","title":"Build Config Popup"},{"location":"features/#build-report","text":"Reporting Live \ud83d\udcdd. Get detailed information of what is bloating your build. Build report will automatically be created when you make a build You can open report window from Window > Show Build Report","title":"Build Report"},{"location":"features/#extension-methods","text":"","title":"Extension Methods"},{"location":"features/#collections","text":"Array and List extension methods to shuffle, get random item, get random index, delete null elements, debug all elements.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collections"},{"location":"features/#scroll","text":"Methods to auto-scroll to a specific point or item in the scrollview.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scroll"},{"location":"features/#animator-controller","text":"Start animation from random frame, change speed of animations.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Animator Controller"},{"location":"features/#camera","text":"Transition camera position and rotation, shake camera, change FOV.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Camera"},{"location":"features/#tmp_text","text":"Animate numbers to easily show changing values. Can also animate text appear and disapper effect.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMP_Text"},{"location":"features/#utilities","text":"","title":"Utilities"},{"location":"features/#floating-text","text":"Use it to show damage text, money earned/spent, etc. Floating text can be spawned via [FloatingTextManager]","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Floating Text"},{"location":"features/#tags-and-layers","text":"Easily access all Tags and Layers as an Enum.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tags and Layers"},{"location":"features/#custom-buttons","text":"Create buttons easily vis pre-defined templates. To create a custon button, go to Create > UI > CustomButton","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Custom Buttons"},{"location":"scripts/","text":"Scripts An overview of how certain scripts should be used. GameManager A global manager script that should only handle global tasks, like overall game settings, physics settings, etc. GlobalReferences This script will hold references of all manager and handler scripts that are universally required. LevelManager LevelManager is responsible for loading the correct level, managing level win and level fail. SettingsHandler This script controls the settings panel which holds music and haptic toggles along with the attribution section. GameState Defines all possible game states as an enum. Basic states have already been added. You can expand on this and add any major game states to this. GameEvents Defines basic events that you can use as required. For example - OnGameStarted, OnGamePaused, OnLevelComplete, OnLevelFailed. You can add any more global events here. Note: Only add major events that affect the entire game here. Do not add any functionality-specific events here. CoroutineManager You can use this script to run any coroutine without being dependant on a monobehaviour object. You can also call coroutines with delay. It also includes a class called CoroutineWaitDelay which defines constants for delay in seconds. Use these constants whenever you need to define delays. LevelEndScreenBase Provides a basic implementation of level complete and level fail screens. Note: For custom implementation of these screens, make sure you extend this class as it provides all basic functionality. Logger A custom logger that helps in easier debugging. You can pass tags to easily search for relevant logs. FloatingTextManager This script allows you to easily spawn floating texts that can be used to indicate damage, income, etc. ButtonAnimator This script allows us to easily add feedback to buttons. Just assign the event intended for the button and on click the button will now animate and then call the event. AdsManager A very basic template that allows for ad integration. AnalyticsHandler A very basic template that allows for analytics integration. SaveManager Use this script to save persistent data instead of using PlayerPrefs. It also allows saving custom data like dates, images, etc. StaticInstance, Singleton, PersistentSingleton These classes allow an easy way to create instances of an object. StaticInstance - Creates a static \"Instance\" variable of the object that can be overwritten. Gets destroyed when scene reloads. Singleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Gets destroyed when scene reloads. PersistentSingleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Does not get destroyed when scene reloads.","title":"Scripts"},{"location":"scripts/#scripts","text":"An overview of how certain scripts should be used.","title":"Scripts"},{"location":"scripts/#gamemanager","text":"A global manager script that should only handle global tasks, like overall game settings, physics settings, etc.","title":"GameManager"},{"location":"scripts/#globalreferences","text":"This script will hold references of all manager and handler scripts that are universally required.","title":"GlobalReferences"},{"location":"scripts/#levelmanager","text":"LevelManager is responsible for loading the correct level, managing level win and level fail.","title":"LevelManager"},{"location":"scripts/#settingshandler","text":"This script controls the settings panel which holds music and haptic toggles along with the attribution section.","title":"SettingsHandler"},{"location":"scripts/#gamestate","text":"Defines all possible game states as an enum. Basic states have already been added. You can expand on this and add any major game states to this.","title":"GameState"},{"location":"scripts/#gameevents","text":"Defines basic events that you can use as required. For example - OnGameStarted, OnGamePaused, OnLevelComplete, OnLevelFailed. You can add any more global events here. Note: Only add major events that affect the entire game here. Do not add any functionality-specific events here.","title":"GameEvents"},{"location":"scripts/#coroutinemanager","text":"You can use this script to run any coroutine without being dependant on a monobehaviour object. You can also call coroutines with delay. It also includes a class called CoroutineWaitDelay which defines constants for delay in seconds. Use these constants whenever you need to define delays.","title":"CoroutineManager"},{"location":"scripts/#levelendscreenbase","text":"Provides a basic implementation of level complete and level fail screens. Note: For custom implementation of these screens, make sure you extend this class as it provides all basic functionality.","title":"LevelEndScreenBase"},{"location":"scripts/#logger","text":"A custom logger that helps in easier debugging. You can pass tags to easily search for relevant logs.","title":"Logger"},{"location":"scripts/#floatingtextmanager","text":"This script allows you to easily spawn floating texts that can be used to indicate damage, income, etc.","title":"FloatingTextManager"},{"location":"scripts/#buttonanimator","text":"This script allows us to easily add feedback to buttons. Just assign the event intended for the button and on click the button will now animate and then call the event.","title":"ButtonAnimator"},{"location":"scripts/#adsmanager","text":"A very basic template that allows for ad integration.","title":"AdsManager"},{"location":"scripts/#analyticshandler","text":"A very basic template that allows for analytics integration.","title":"AnalyticsHandler"},{"location":"scripts/#savemanager","text":"Use this script to save persistent data instead of using PlayerPrefs. It also allows saving custom data like dates, images, etc.","title":"SaveManager"},{"location":"scripts/#staticinstance-singleton-persistentsingleton","text":"These classes allow an easy way to create instances of an object. StaticInstance - Creates a static \"Instance\" variable of the object that can be overwritten. Gets destroyed when scene reloads. Singleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Gets destroyed when scene reloads. PersistentSingleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Does not get destroyed when scene reloads.","title":"StaticInstance, Singleton, PersistentSingleton"},{"location":"scripts/#_1","text":"","title":""}]}