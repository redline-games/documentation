{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Base Project Documentation We have compiled a brief documentation of the base project and other RLG packages that will help develop games with much more ease, fluidity and speed. Please go through each page to make sure you are aware of all features and how to use them. How to use Clone the base project from https://gitlab.com/redlinegames/baseproject.git Duplicate the project files in your working repository and use that as a base for any new project NOTE: In case you do not have access to the base project repository, please contact the Sr. Developer or the Project Manager Overview Features Mentions notable features that have been integrated in th base project Scripts Gives a basic understanding of all important scripts and how to use them Beautification Outlines custom tools included in the project that will help you organise the project better Creative package A custom package that will help you record top-notch creatives Packages Download links for all templates and custom packages Base project Creative package Runner game template","title":"Home"},{"location":"#welcome-to-base-project-documentation","text":"We have compiled a brief documentation of the base project and other RLG packages that will help develop games with much more ease, fluidity and speed. Please go through each page to make sure you are aware of all features and how to use them.","title":"Welcome to Base Project Documentation"},{"location":"#how-to-use","text":"Clone the base project from https://gitlab.com/redlinegames/baseproject.git Duplicate the project files in your working repository and use that as a base for any new project NOTE: In case you do not have access to the base project repository, please contact the Sr. Developer or the Project Manager","title":"How to use"},{"location":"#overview","text":"","title":"Overview"},{"location":"#features","text":"Mentions notable features that have been integrated in th base project","title":"Features"},{"location":"#scripts","text":"Gives a basic understanding of all important scripts and how to use them","title":"Scripts"},{"location":"#beautification","text":"Outlines custom tools included in the project that will help you organise the project better","title":"Beautification"},{"location":"#creative-package","text":"A custom package that will help you record top-notch creatives","title":"Creative package"},{"location":"#packages","text":"Download links for all templates and custom packages","title":"Packages"},{"location":"#base-project","text":"","title":"Base project"},{"location":"#creative-package_1","text":"","title":"Creative package"},{"location":"#runner-game-template","text":"","title":"Runner game template"},{"location":"about/","text":"About Something about the base package Details","title":"About"},{"location":"about/#about","text":"Something about the base package","title":"About"},{"location":"about/#details","text":"","title":"Details"},{"location":"beautification/","text":"Beautification We have a few custom features that enable you to organize and beautify your project setup. Hierarchy Separators Use this to sort and color-code the hierarchy. Simply apply the relevant tags to apply the style. Inspector Horizontal Line Use this to sort related items within a script.","title":"Beautification"},{"location":"beautification/#beautification","text":"We have a few custom features that enable you to organize and beautify your project setup.","title":"Beautification"},{"location":"beautification/#hierarchy-separators","text":"Use this to sort and color-code the hierarchy. Simply apply the relevant tags to apply the style.","title":"Hierarchy Separators"},{"location":"beautification/#inspector-horizontal-line","text":"Use this to sort related items within a script.","title":"Inspector Horizontal Line"},{"location":"creativepackage/","text":"Creative Package We have a bunch of features packed into a single package that will help you speed up the development for CPI videos. You can download the creative package here Once imported, you can access all features via the top bar Creatives > Creative Wizard Features Guide Read through the Creatives Guidelines for better understanding of how to record videos Texture Compression Use this to uncompress all textures just of creatives. This can be reverted at any time to previous setting. Note: Only use this when we need realistic, HQ textures. Not required for simple puzzle games Camera Settings You can edit camera setting to toggle greyscale for specific layers, toggle SSAO, and change skyboxes. Camera settings can also be reverted easily. Note: Greyscale does not work on overlay canvas Lighting Settings Easily apply custom lighting using lighting data presets. Onboarding Hand Toggle a tutorial hand to show finger movement in videos. Right-click to toggle the hand visual. End Screens and CTA Custom end screens and a CTA screen template is provided with the package. Use them and customize as required.","title":"Creative Package"},{"location":"creativepackage/#creative-package","text":"We have a bunch of features packed into a single package that will help you speed up the development for CPI videos. You can download the creative package here Once imported, you can access all features via the top bar Creatives > Creative Wizard","title":"Creative Package"},{"location":"creativepackage/#features","text":"","title":"Features"},{"location":"creativepackage/#guide","text":"Read through the Creatives Guidelines for better understanding of how to record videos","title":"Guide"},{"location":"creativepackage/#texture-compression","text":"Use this to uncompress all textures just of creatives. This can be reverted at any time to previous setting. Note: Only use this when we need realistic, HQ textures. Not required for simple puzzle games","title":"Texture Compression"},{"location":"creativepackage/#camera-settings","text":"You can edit camera setting to toggle greyscale for specific layers, toggle SSAO, and change skyboxes. Camera settings can also be reverted easily. Note: Greyscale does not work on overlay canvas","title":"Camera Settings"},{"location":"creativepackage/#lighting-settings","text":"Easily apply custom lighting using lighting data presets.","title":"Lighting Settings"},{"location":"creativepackage/#onboarding-hand","text":"Toggle a tutorial hand to show finger movement in videos. Right-click to toggle the hand visual.","title":"Onboarding Hand"},{"location":"creativepackage/#end-screens-and-cta","text":"Custom end screens and a CTA screen template is provided with the package. Use them and customize as required.","title":"End Screens and CTA"},{"location":"features/","text":"Features Currency Manager Money matters \ud83d\udcb8. Use one manager per currency, assign relevant data in the corresponding scriptable object and you're set. [CurrencyManager] prefab can be found in Assets/Prefabs/Currency Make sure the respective 2D and 3D currency prefabs are added in PoolBoss Pooling Pool is cool \ud83d\ude0e. When you need a bunch of the same prefab multiple times, use pooling instead of spawning them at runtime for better runtime performance. Don't forget to add your prefabs to PoolBoss Level End Screens Some wins \ud83c\udf89, some fails \u2620\ufe0f. A set of default screens have already been integrated for easy game flow. To customize, extend the LevelEndScreenBase script and create custom win and lose scripts Progress Bars Keep progressing \ud83d\udcc8. A variety of progress bars have been pre-made for easy integration You can find the different types of progress bars in Assets/Prefabs/ProgressBar Haptics Tap, vibrate, experience \ud83d\udcf3. Choose from pre-built presets like Success \u2705, Failure \u26a0\ufe0f, Light \ud83e\udeb6, and Heavy \ud83e\udea8 among others. Haptics can be accessed via the HapticsManager Audio Let the music play. Easily Play and manage music \ud83d\udd0a and SFX \ud83d\udd14 with customizable volume and pitch. Use AudioManager to handle any in-game sounds Scene Loader Transition between scenes \ud83c\udfac seamlessly. Use the Scene Loader and Transition Manager in tandem to load scenes with visible loading progress or just a generic loading screen. Transition manager supports different types of transitions that can be extended Settings A pre-made settings \u2699\ufe0f panel has been created for your convenience. Easily integrate toggles for music and haptics, as well as attributions for non-cc0 artwork. SettingsHandler deals with everything related to settings To add attribution, add info in the AtrributionDataSO and it'll reflect automatically Button Attribute Test with ease \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c. Use attribute [Button] to expose the method as shown in above image UI Particles Particles \u2728 always make things better. Now integrate particle systems in overlay canvas. Add the UIParticleSystem component to render particles in UI UI Gradient Add gradients \ud83c\udfa8 to UI Images for a more polished look. You can make bland screens pop much more using simple vertical and horizontal gradients. Add the Gradient or Gradient2 component on any image UI Gradient example Render Texture Creator Render the world \ud83c\udf0f in UI. Easily set up dynamically created render textures that don't bloat your build size. RenderTextureCamera prefab can be found in Assets/Prefabs/RenderTextureCamera Place it in scene, use the camera to set up your visuals, assign raw images, and hit play Some helpful buttons are also provided on the script to help you Custom Shaders Let the creative juices flow \ud83e\udde0. Some basic custom shaders to create effects like Checkerboard, Heat Haze, Stipple, Better Transparency All custom shader can be found in Assets/Shaders 3D Mask Mask \ud83c\udfad 3D objects in world space. You can make objects be visible either inside or outside the mask object. Mask shaders can be found in Assets/Shaders/3DMask An example showcasing this can be found in Assets/Prefabs/3DMask/3DMaskExample 9-sliced Circles Life is a circle \u26aa. You can create a lot of UI just using a 9-sliced white circle sprite. The project already has Circle_512 and Circle_64 sprites that have been sliced To use them, assign the sprite to an image component and play around with the \"Pixels Per Unit Multiplier\" value to get the desired rounding. 9-slicing example Build Report Reporting Live \ud83d\udcdd. Get detailed information of what is bloating your build. Build report will automatically be created when you make a build You can open report window from Window > Show Build Report Extension Methods Collections Array and List extension methods to shuffle, get random item, get random index, delete null elements, debug all elements. Scroll Methods to auto-scroll to a specific point or item in the scrollview. Animator Controller Start animation from random frame, change speed of animations. Camera Transition camera position and rotation, shake camera, change FOV. TMP_Text Animate numbers to easily show changing values. Utilities Floating Text Use it to show damage text, money earned/spent, etc. Floating text can be spawned via [FloatingTextManager] Tags and Layers Easily access all Tags and Layers as an Enum. Custom Buttons Create buttons easily vis pre-defined templates. To create a custon button, go to Create > UI > CustomButton Editor Scripts These features can be accessed from top menu bar - CustomTools Screenshot Take high resolution screenshots of everything rendered in your game camera. Object Renamer Rename a bunch of scene objects together. It also supports ascending and decending serialization. Object Replacer Replace objects in your scene with a new prefab. Optionally, you can also delete old objects.","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#currency-manager","text":"Money matters \ud83d\udcb8. Use one manager per currency, assign relevant data in the corresponding scriptable object and you're set. [CurrencyManager] prefab can be found in Assets/Prefabs/Currency Make sure the respective 2D and 3D currency prefabs are added in PoolBoss","title":"Currency Manager"},{"location":"features/#pooling","text":"Pool is cool \ud83d\ude0e. When you need a bunch of the same prefab multiple times, use pooling instead of spawning them at runtime for better runtime performance. Don't forget to add your prefabs to PoolBoss","title":"Pooling"},{"location":"features/#level-end-screens","text":"Some wins \ud83c\udf89, some fails \u2620\ufe0f. A set of default screens have already been integrated for easy game flow. To customize, extend the LevelEndScreenBase script and create custom win and lose scripts","title":"Level End Screens"},{"location":"features/#progress-bars","text":"Keep progressing \ud83d\udcc8. A variety of progress bars have been pre-made for easy integration You can find the different types of progress bars in Assets/Prefabs/ProgressBar","title":"Progress Bars"},{"location":"features/#haptics","text":"Tap, vibrate, experience \ud83d\udcf3. Choose from pre-built presets like Success \u2705, Failure \u26a0\ufe0f, Light \ud83e\udeb6, and Heavy \ud83e\udea8 among others. Haptics can be accessed via the HapticsManager","title":"Haptics"},{"location":"features/#audio","text":"Let the music play. Easily Play and manage music \ud83d\udd0a and SFX \ud83d\udd14 with customizable volume and pitch. Use AudioManager to handle any in-game sounds","title":"Audio"},{"location":"features/#scene-loader","text":"Transition between scenes \ud83c\udfac seamlessly. Use the Scene Loader and Transition Manager in tandem to load scenes with visible loading progress or just a generic loading screen. Transition manager supports different types of transitions that can be extended","title":"Scene Loader"},{"location":"features/#settings","text":"A pre-made settings \u2699\ufe0f panel has been created for your convenience. Easily integrate toggles for music and haptics, as well as attributions for non-cc0 artwork. SettingsHandler deals with everything related to settings To add attribution, add info in the AtrributionDataSO and it'll reflect automatically","title":"Settings"},{"location":"features/#button-attribute","text":"Test with ease \ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c. Use attribute [Button] to expose the method as shown in above image","title":"Button Attribute"},{"location":"features/#ui-particles","text":"Particles \u2728 always make things better. Now integrate particle systems in overlay canvas. Add the UIParticleSystem component to render particles in UI","title":"UI Particles"},{"location":"features/#ui-gradient","text":"Add gradients \ud83c\udfa8 to UI Images for a more polished look. You can make bland screens pop much more using simple vertical and horizontal gradients. Add the Gradient or Gradient2 component on any image UI Gradient example","title":"UI Gradient"},{"location":"features/#render-texture-creator","text":"Render the world \ud83c\udf0f in UI. Easily set up dynamically created render textures that don't bloat your build size. RenderTextureCamera prefab can be found in Assets/Prefabs/RenderTextureCamera Place it in scene, use the camera to set up your visuals, assign raw images, and hit play Some helpful buttons are also provided on the script to help you","title":"Render Texture Creator"},{"location":"features/#custom-shaders","text":"Let the creative juices flow \ud83e\udde0. Some basic custom shaders to create effects like Checkerboard, Heat Haze, Stipple, Better Transparency All custom shader can be found in Assets/Shaders","title":"Custom Shaders"},{"location":"features/#3d-mask","text":"Mask \ud83c\udfad 3D objects in world space. You can make objects be visible either inside or outside the mask object. Mask shaders can be found in Assets/Shaders/3DMask An example showcasing this can be found in Assets/Prefabs/3DMask/3DMaskExample","title":"3D Mask"},{"location":"features/#9-sliced-circles","text":"Life is a circle \u26aa. You can create a lot of UI just using a 9-sliced white circle sprite. The project already has Circle_512 and Circle_64 sprites that have been sliced To use them, assign the sprite to an image component and play around with the \"Pixels Per Unit Multiplier\" value to get the desired rounding. 9-slicing example","title":"9-sliced Circles"},{"location":"features/#build-report","text":"Reporting Live \ud83d\udcdd. Get detailed information of what is bloating your build. Build report will automatically be created when you make a build You can open report window from Window > Show Build Report","title":"Build Report"},{"location":"features/#extension-methods","text":"","title":"Extension Methods"},{"location":"features/#collections","text":"Array and List extension methods to shuffle, get random item, get random index, delete null elements, debug all elements.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collections"},{"location":"features/#scroll","text":"Methods to auto-scroll to a specific point or item in the scrollview.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scroll"},{"location":"features/#animator-controller","text":"Start animation from random frame, change speed of animations.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Animator Controller"},{"location":"features/#camera","text":"Transition camera position and rotation, shake camera, change FOV.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Camera"},{"location":"features/#tmp_text","text":"Animate numbers to easily show changing values.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TMP_Text"},{"location":"features/#utilities","text":"","title":"Utilities"},{"location":"features/#floating-text","text":"Use it to show damage text, money earned/spent, etc. Floating text can be spawned via [FloatingTextManager]","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Floating Text"},{"location":"features/#tags-and-layers","text":"Easily access all Tags and Layers as an Enum.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tags and Layers"},{"location":"features/#custom-buttons","text":"Create buttons easily vis pre-defined templates. To create a custon button, go to Create > UI > CustomButton","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Custom Buttons"},{"location":"features/#editor-scripts","text":"These features can be accessed from top menu bar - CustomTools","title":"Editor Scripts"},{"location":"features/#screenshot","text":"Take high resolution screenshots of everything rendered in your game camera.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Screenshot"},{"location":"features/#object-renamer","text":"Rename a bunch of scene objects together. It also supports ascending and decending serialization.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object Renamer"},{"location":"features/#object-replacer","text":"Replace objects in your scene with a new prefab. Optionally, you can also delete old objects.","title":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object Replacer"},{"location":"scripts/","text":"Scripts An overview of how certain scripts should be used. GameManager A global manager script that should only handle global tasks, like overall game settings, physics settings, etc. GlobalReferences This script will hold references of all manager and handler scripts that are universally required. LevelManager LevelManager is responsible for loading the correct level, managing level win and level fail. SettingsHandler This script controls the settings panel which holds music and haptic toggles along with the attribution section. GameState Defines all possible game states as an enum. Basic states have already been added. You can expand on this and add any major game states to this. GameEvents Defines basic events that you can use as required. For example - OnGameStarted, OnGamePaused, OnLevelComplete, OnLevelFailed. You can add any more global events here. Note: Only add major events that affect the entire game here. Do not add any functionality-specific events here. CoroutineManager You can use this script to run any coroutine without being dependant on a monobehaviour object. You can also call coroutines with delay. It also includes a class called CoroutineWaitDelay which defines constants for delay in seconds. Use these constants whenever you need to define delays. LevelEndScreenBase Provides a basic implementation of level complete and level fail screens. Note: For custom implementation of these screens, make sure you extend this class as it provides all basic functionality. Logger A custom logger that helps in easier debugging. You can pass tags to easily search for relevant logs. FloatingTextManager This script allows you to easily spawn floating texts that can be used to indicate damage, income, etc. ButtonAnimator This script allows us to easily add feedback to buttons. Just assign the event intended for the button and on click the button will now animate and then call the event. AdsManager A very basic template that allows for ad integration. AnalyticsHandler A very basic template that allows for analytics integration. SaveManager Use this script to save persistent data instead of using PlayerPrefs. It also allows saving custom data like dates, images, etc. StaticInstance, Singleton, PersistentSingleton These classes allow an easy way to create instances of an object. StaticInstance - Creates a static \"Instance\" variable of the object that can be overwritten. Gets destroyed when scene reloads. Singleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Gets destroyed when scene reloads. PersistentSingleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Does not get destroyed when scene reloads.","title":"Scripts"},{"location":"scripts/#scripts","text":"An overview of how certain scripts should be used.","title":"Scripts"},{"location":"scripts/#gamemanager","text":"A global manager script that should only handle global tasks, like overall game settings, physics settings, etc.","title":"GameManager"},{"location":"scripts/#globalreferences","text":"This script will hold references of all manager and handler scripts that are universally required.","title":"GlobalReferences"},{"location":"scripts/#levelmanager","text":"LevelManager is responsible for loading the correct level, managing level win and level fail.","title":"LevelManager"},{"location":"scripts/#settingshandler","text":"This script controls the settings panel which holds music and haptic toggles along with the attribution section.","title":"SettingsHandler"},{"location":"scripts/#gamestate","text":"Defines all possible game states as an enum. Basic states have already been added. You can expand on this and add any major game states to this.","title":"GameState"},{"location":"scripts/#gameevents","text":"Defines basic events that you can use as required. For example - OnGameStarted, OnGamePaused, OnLevelComplete, OnLevelFailed. You can add any more global events here. Note: Only add major events that affect the entire game here. Do not add any functionality-specific events here.","title":"GameEvents"},{"location":"scripts/#coroutinemanager","text":"You can use this script to run any coroutine without being dependant on a monobehaviour object. You can also call coroutines with delay. It also includes a class called CoroutineWaitDelay which defines constants for delay in seconds. Use these constants whenever you need to define delays.","title":"CoroutineManager"},{"location":"scripts/#levelendscreenbase","text":"Provides a basic implementation of level complete and level fail screens. Note: For custom implementation of these screens, make sure you extend this class as it provides all basic functionality.","title":"LevelEndScreenBase"},{"location":"scripts/#logger","text":"A custom logger that helps in easier debugging. You can pass tags to easily search for relevant logs.","title":"Logger"},{"location":"scripts/#floatingtextmanager","text":"This script allows you to easily spawn floating texts that can be used to indicate damage, income, etc.","title":"FloatingTextManager"},{"location":"scripts/#buttonanimator","text":"This script allows us to easily add feedback to buttons. Just assign the event intended for the button and on click the button will now animate and then call the event.","title":"ButtonAnimator"},{"location":"scripts/#adsmanager","text":"A very basic template that allows for ad integration.","title":"AdsManager"},{"location":"scripts/#analyticshandler","text":"A very basic template that allows for analytics integration.","title":"AnalyticsHandler"},{"location":"scripts/#savemanager","text":"Use this script to save persistent data instead of using PlayerPrefs. It also allows saving custom data like dates, images, etc.","title":"SaveManager"},{"location":"scripts/#staticinstance-singleton-persistentsingleton","text":"These classes allow an easy way to create instances of an object. StaticInstance - Creates a static \"Instance\" variable of the object that can be overwritten. Gets destroyed when scene reloads. Singleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Gets destroyed when scene reloads. PersistentSingleton - Creates a singleton static \"Instance\" variable of the object that cannot be overwritten. Does not get destroyed when scene reloads.","title":"StaticInstance, Singleton, PersistentSingleton"},{"location":"scripts/#_1","text":"","title":""}]}